.PAGE 'INITIALIZATION'
; START - SYSTEM RESET
; WILL GOTO ROM AT $A000...
; IF LOCS $A004-$A008
; = 'A0CBM'
;      ^^^> THESE HAVE MSB SET
; KERNAL EXPECTS...
; $A000- .WORD INITILIZE (HARD START)
; $A002- .WORD PANIC (WARM START)
; ... ELSE BASIC SYSTEM USED
START	LDX #$FF
	SEI
	TXS
	CLD
	JSR A0INT       ;TEST FOR $A0 ROM IN
	BNE START1
	JMP ($A000)     ; GO INIT AS $A000 ROM WANTS
START1	JSR RAMTAS      ;GO RAM TEST AND SET
	JSR RESTOR      ;GO SET UP OS VECTORS
	JSR IOINIT      ;GO INITILIZE I/O DEVICES
	JSR CINT        ;GO INITILIZE SCREEN
	CLI             ;INTERRUPTS OKAY NOW
	JMP ($C000)     ;GO TO BASIC SYSTEM
.SKI 4
; A0INT - TEST FOR AN $A000 ROM
;  RETURNS Z - $A000 IN
;
A0INT	LDX #TBLA0E-TBLA0R ;CHECK FOR $A000
A0IN1	LDA TBLA0R-1,X
	CMP $A004-1,X
	BNE A0IN2
	DEX
	BNE A0IN1
A0IN2	RTS
;
TBLA0R	.BYT 'A0',$C3,$C2,$CD ;..A0CBM..
TBLA0E
.SKI 4
; RESTOR - SET KERNAL INDIRECTS AND VECTORS (SYSTEM)
;
RESTOR	LDX #<VECTSS
	LDY #>VECTSS
	CLC
;
; VECTOR - SET KERNAL INDIRECT AND VECTORS (USER)
;
VECTOR	STX TMP2
	STY TMP2+1
	LDY #VECTSE-VECTSS-1
MOVOS1	LDA CINV,Y      ;GET FROM STORAGE
	BCS MOVOS2      ;C...WANT STORAGE TO USER
	LDA (TMP2)Y     ;...WANT USER TO STORAGE
MOVOS2	STA (TMP2)Y     ;PUT IN USER
	STA CINV,Y      ;PUT IN STORAGE
	DEY
	BPL MOVOS1
	RTS
;
VECTSS	.WOR KEY,TIMB,NNMI
	.WOR NOPEN,NCLOSE,NCHKIN
	.WOR NCKOUT,NCLRCH,NBASIN
	.WOR NBSOUT,NSTOP,NGETIN
	.WOR NCLALL,TIMB ;GOTO BREAK ON A USRCMD JMP
	.WOR NLOAD,NSAVE
VECTSE
.PAGE 'INITILIZE CODE'
; RAMTAS - MEMORY SIZE CHECK AND SET
;
RAMTAS	LDA #0          ;ZERO LOW MEMORY
	TAX             ;START AT 00
RAMTZ0	STA $00,X       ;ZERO PAGE
	STA $200,X      ;USER BUFFERS AND VARS
	STA $300,X      ;SYSTEM SPACE AND USER SPACE
	INX
	BNE RAMTZ0
;
;ALLOCATE TAPE BUFFERS
;
	LDX #<TBUFFR
	LDY #>TBUFFR
	STX TAPE1
	STY TAPE1+1
;
; SET TOP AND BOTTOM OF MEMORY
;
RAMTBT	STA TMP0        ;SET LOW INITAL INDEX
	STA XSAV        ;SET TOP/BOTTOM FLAG
	STA MEMSTR      ;SET LOW BOTTOM ON A PAGE
	TAY             ;MOVE ZERO TO .Y
	LDA #4          ;SET HIGH INITAL INDEX
	STA TMP0+1
;
RAMTZ1	INC TMP0        ;MOVE INDEX THRU MEMORY
	BNE RAMTZ2
	INC TMP0+1
;
RAMTZ2	JSR CHKMEM      ;GO CHECK
	LDA XSAV        ;TOP/BOTTOM CHECK...
	BEQ RAMTZ5      ;...BOTTOM
;
	BCS RAMTZ1      ;TOP & STILL GOOD
	LDY TMP0+1      ;ELSE FOUND BAD
	LDX TMP0
	CPY #$20        ;CHECK IF MEMORY GOOD
	BCC BADRAM      ;NO...BAD SYSTEM RAM
	CPY #$21        ;CHECK FOR SCREEN LOCATION
	BCS RAMTZ4      ;SCREEN TO BOTTOM
	LDY #$1E        ;SCREEN TO TOP
	STY HIBASE      ;SET SYSTEM SCREEN BASE
RAMTZ3	JMP SETTOP      ;GO SET TOP OF SYSTEM MEMORY
;
RAMTZ4	LDA #$12        ;SET NEW BOTTOM
	STA MEMSTR+1
	LDA #$10        ;SCREEN TO BOTTOM
	STA HIBASE
	BNE RAMTZ3      ;JMP & SAVE A BYTE
;
RAMTZ5	BCC RAMTZ1      ;BOTTOM & STILL BAD
	LDA TMP0+1      ;DO THIS WAY SO .Y STILL GOOD
	STA MEMSTR+1    ;SET BOTTOM
	STA XSAV        ;FLAG TO TOP
	CMP #$11
	BCC RAMTZ1      ;GO FIND TOP IF SYSTEM RAM IS GOOD
;
BADRAM	JSR INITV       ;INITILIZE VIC  RAM IS BAD
	JMP BADRAM
.SKI 3
BSIT	.WOR WRTZ,WRTN,KEY,READ ;TABLE OF INDIRECTS FOR CASSETTE IRQ'S
.PAG 'INITILIZE CODE'
; IOINIT - INITILIZE IO DEVICES
;
IOINIT	LDA #$7F        ;KILL IERS
	STA D1IER
	STA D2IER
	LDA #%01000000  ;FREE RUNNING T1 D2
	STA D2ACR
	LDA #%01000000  ;FREE RUNNING T1 T2 ONESHOT D1
	STA D1ACR
	LDA #%11111110  ;D1 CA2 HIGH,CB2 HIGH,CA1 NEG,CB1 POS
	STA D1PCR
	LDA #%11011110  ;D2 CA2 HIGH,CB2 LOW,CA1 NEG,CB1 POS
	STA D2PCR
	LDX #$00
	STX D1DDRB      ;USER PORT (NO RS-232)
	LDX #%11111111
	STX D2DDRB      ;KEYBOARD COLS ARE OUTPUTS
	LDX #$00
	STX D2DDRA      ;KEYBOARD ROWS ARE INPUTS
	LDX #%10000000  ;SCLK SDATA 4JOY CASSW SATN
	STX D1DDRA      ;...CASS MOTOR, CASS SWITCH, ACK
	LDX #%00000000  ;SATN LOW
	STX D1ORA
	JSR CLKHI       ;CLKHI TO RELEASE SERIAL DEVICE
	LDA #$82        ;ENABLE PANIC BUTTON
	STA D1IER
	JSR CLKLO       ;CLKLO TO RESTORE CLOCK LINE
;
IOKEYS	LDA #$C0        ;ENABLE T1 INTERRUPTS
	STA D2IER
	LDA #<SIXTY     ;...AT 60 HZ RATE
	STA D2T1L
	LDA #>SIXTY
	STA D2T1H
	RTS
;
; SIXTY HERTZ VALUE
;
SIXTY	= 17033
.PAGE 'INIT - SYS SUBS'
SETNAM	STA FNLEN
	STX FNADR
	STY FNADR+1
	RTS
.SKI 5
SETLFS	STA LA
	STX FA
	STY SA
	RTS
.SKI 5
READSS	LDA FA          ;SEE WHICH DEVICES' TO READ
	CMP #2          ;IS IT RS-232?
	BNE READST      ;NO...READ SERIAL/CASS
	LDA RSSTAT      ;YES...GET RS-232 UP
	LDA #00         ;CLEAR RS232 STATUS WHEN READ
	STA RSSTAT
	RTS
SETMSG	STA MSGFLG
READST	LDA STATUS
UDST	ORA STATUS
	STA STATUS
	RTS
.SKI 5
SETTMO	STA TIMOUT
	RTS
.SKI 5
MEMTOP	BCC SETTOP
;
;CARRY SET--READ TOP OF MEMORY
;
GETTOP	LDX MEMSIZ
	LDY MEMSIZ+1
;
;CARRY CLEAR--SET TOP OF MEMORY
;
SETTOP	STX MEMSIZ
	STY MEMSIZ+1
	RTS
.SKI 5
;MANAGE BOTTOM OF MEMORY
;
MEMBOT	BCC SETBOT
;
;CARRY SET--READ BOTTOM OF MEMORY
;
	LDX MEMSTR
	LDY MEMSTR+1
;
;CARRY CLEAR--SET BOTTOM OF MEMORY
;
SETBOT	STX MEMSTR
	STY MEMSTR+1
	RTS
.SKI 5
;********************************
;
; C H E C K   M E M O R Y
;
; CHECK FOR THE EXISTENCE OF
; RAM AT THE LOCATION SPECIFIED
; IN TMP0
;
; C=0 IF THERE IS NO RAM AT TMP0
; C=1 IF THERE IS RAM AT TMP0
;
; (TMP0) IS PRESERVED
;*******************************
;
CHKMEM	LDA (TMP0)Y
	TAX             ;SAVE BYTE AT TEST LOCATION
	LDA #$55        ;TEST ALL BITS
	STA (TMP0)Y
	CMP (TMP0)Y     ;DO THEY MATCH
	BNE NOMEM       ;BRANCH IF NOT
	ROR A           ;TRY THE OTHER BITS
	STA (TMP0)Y
	CMP (TMP0)Y     ;DO THEY MATCH
	BNE NOMEM       ;BRANCH IF NOT
	.BYT  $A9       ;CARRY IS SET SO SKIP
NOMEM	CLC             ;NO RAM FLAG
	TXA             ;RESTORE IN CASE OF RAM
	STA (TMP0)Y
	RTS
.END
; RSR 8/5/80 CHANGE IO STRUCTURE
; RSR 8/15/80 ADD MEMORY TEST
; RSR 8/21/80 CHANGE I/O FOR MOD
; RSR 8/25/80 CHANGE I/O FOR MOD2
; RSR 8/29/80 CHANGE RAMTEST FOR HARDWARE MISTAKE
; RSR 9/22/80 CHANGE SO RAM HANG RS232 STATUS READ
